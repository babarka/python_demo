from pyspark.sql import SQLContext
sqlContext = SQLContext(sc)
dat = sqlContext.parquetFile('/user/cloudera/german_parquet')

dat.printSchema()

from pyspark.mllib.regression import LabeledPoint
def make_lp(x):
    vals=x.asDict()
    label=vals['cred']
    feats=[vals['acct_bal']-1,
           vals['dur_cred'],
           vals['pay_stat'],
           vals['purpose'],
           vals['cred_amt'],
           vals['value']-1,
           vals['len_emp']-1,
           vals['install_pc']-1,
           vals['sex_married']-1,
           vals['guarantors']-1,
           vals['dur_addr']-1,
           vals['max_val']-1,
           vals['age'],
           vals['concurr']-1,
           vals['typ_aprtmnt']-1,
           vals['no_creds']-1,
           vals['occupation']-1,
           vals['no_dep']-1,
           vals['telephone']-1,
           vals['foreign_wkr']-1]
    return LabeledPoint(label, feats)

lp = dat.map(make_lp)

from pyspark.mllib.tree import DecisionTree, DecisionTreeModel
from pyspark.mllib.util import MLUtils

# Need to identify the features which are categorical
cfi = {0:4,5:5,6:5,7:4,8:4,9:3,10:4,11:4,13:3,14:3,15:4,16:4,17:2,18:2,19:2}

model = DecisionTree.trainClassifier(lp, numClasses=2,categoricalFeaturesInfo=cfi,impurity='gini', maxDepth=5, maxBins=32)

model.toDebugString()
